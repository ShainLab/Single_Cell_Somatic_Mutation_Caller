#!/bin/bash
# Single_Cell_Somatic_Mutation_Caller 1.3.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of Funcotator_txt: '$Funcotator_txt'"
    echo "Value of InputVariantsforphasing: '$InputVariantsforphasing'"
	echo "Value of DNAbam: '$DNAbam'"
	echo "Value of RNAbam: '$RNAbam'"
	echo "Value of MpileupInformativeSNP: '$MpileupInformativeSNP'"
	echo "Value of Pindel_Sample_vcf: '$Pindel_Sample_vcf'"
	echo "Value of Pindel_Normal_vcf: '$Pindel_Normal_vcf'"
	echo "Value of Normalbam: '$Normalbam'"
	echo "Value of genome_fa: '$genome_fa'"
	
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	echo "Downloading Samples"
	
    dx download "$Funcotator_txt" -o funcotator_input.txt
	
    dx download "$InputVariantsforphasing" -o InputVariantsforphasing.txt
    
    dx download "$DNAbam" -o DNA.bam
	
    dx download "$RNAbam" -o RNA.bam
    
    dx download "$MpileupInformativeSNP" -o MpileupInformativeSNP.txt
    
    dx download "$Pindel_Sample_vcf" -o Pindel_Sample.vcf
	
    dx download "$Pindel_Normal_vcf" -o Pindel_Normal.vcf
    
    dx download "$Normalbam" -o Normal.bam
    
    dx download "$genome_fa" -o genome.fa
	
	echo "Uninstalling pre-installed R"
    sudo apt-get install -y devscripts &> /dev/null  	
	sudo apt-get remove -y r-cran-* &> /dev/null
	tar xzf R-3.5.2.tar.gz 
	cd R-3.5.2
	echo "Installing R"
	./configure --with-readline=no --with-x=no &> /dev/null
	make &> /dev/null
	sudo make install &> /dev/null
	cd
	
	echo "Installing R Packages"
	Rscript -e 'install.packages("Rcpp_1.0.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("rlang_0.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("ellipsis_0.3.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("glue_1.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("lifecycle_0.2.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("magrittr_1.5.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("purrr_0.3.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("generics_0.0.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("ape_5.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("digest_0.6.25.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vctrs_0.3.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("assertthat_0.2.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("crayon_1.3.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("fansi_0.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("cli_2.0.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("utf8_1.1.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pillar_1.4.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("tidyselect_1.1.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pkgconfig_2.0.3.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("tibble_3.0.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R6_2.4.1.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("dplyr_1.0.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("memuse_4.1-0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("pinfsc50_1.2.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("stringi_1.4.6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("stringr_1.4.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("permute_0.9-5.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vegan_2.5-6.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("viridisLite_0.3.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("vcfR_1.11.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("base64enc_0.1-3.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("htmltools_0.5.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("jsonlite_1.7.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("repr_1.1.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("data.table_1.12.8.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("memisc_0.99.22.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.methodsS3_1.8.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.oo_1.23.0.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("R.utils_2.9.2.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("zip_2.0.4.tar.gz", repos=NULL, type="source")' &> /dev/null
	Rscript -e 'install.packages("openxlsx_4.1.4.tar.gz", repos=NULL, type="source")' &> /dev/null	
	
	Rscript Funcotator_Mutect2.R funcotator_input.txt
	
	tar xf samtools-1.9.tar.bz2
	cd samtools-1.9
	./configure &> /dev/null
	make &> /dev/null
	sudo make install &> /dev/null
    export PATH=/usr/local/bin:$PATH &> /dev/null
    cd
    
    echo "Indexing Bams"
    samtools index RNA.bam
    samtools index DNA.bam
    samtools index Normal.bam
    ReadLength="$(samtools view DNA.bam | awk '{print length($10)}' | head -100000 | sort -nru | head -1)"
    
    echo "Read Length is ${ReadLength} bp"
    
    echo "Running Mpileup on RNA"
   	perl Mpileup_RNA.pl MML.txt RNA.bam &> /dev/null
   	
   	echo "Running Mpileup on Sample"
    perl Mpileup_DNA.pl MML.txt DNA.bam &> /dev/null
    
    echo "Running Mpileup on Normal"
    perl Mpileup_Normal.pl MML.txt Normal.bam &> /dev/null

    echo "Haplotyping DNA bam"
    perl Haplotype3.pl DNA.bam InputVariantsforphasing.txt ${ReadLength} &> /dev/null
    
    echo "Running Mpileup on Haplotype 0"
    perl Mpileup_Sort0.pl MML.txt SortedFiltered.0.bam  &> /dev/null
    
    echo "Running Mpileup on Haplotype 1"
    perl Mpileup_Sort1.pl MML.txt SortedFiltered.1.bam &> /dev/null
    
    chmod 777 SeqContext.pl
    echo "Running UV Script"
    perl SeqContext.pl SeqContextInput.txt &> /dev/null
    
    echo "Running Mpileup for LOH"
    perl Mpileup_LOH.pl MpileupInformativeSNP.txt DNA.bam &> /dev/null
    
    Rscript JavaTree.R
    
	echo "Running Pindel Filter"
	Rscript Pindel_Filter.R Pindel_Normal.vcf Pindel_Sample.vcf &> /dev/null
		
	{
		if [ ! -f sample_pindel.vcf ]; then
			touch sample_pindel.vcf
			touch Pindel_filtered.vcf
			touch Indel_MML.xlsx
			touch Indel_MML.txt
			touch pindel_func.txt
    	else
			echo "Running Funcotator on Filtered Indels"
			
			samtools faidx genome.fa
    		tar -xzf ~/jdk-8u291-linux-x64.tar.gz
    		mkdir /usr/lib/jvm
    		mv ~/jdk1.8.0_291 /usr/lib/jvm/
    
    		sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_291/bin/javac 1 &> /dev/null
			sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_291/bin/java 1 &> /dev/null
			sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk1.8.0_291/bin/javaws 1 &> /dev/null
			java -version

			echo "Creating Sequence Dictionary (.dict) file for fasta file"
			gatk-4.2.0.0/gatk CreateSequenceDictionary -R genome.fa &> /dev/null
			
			echo "Running Funcotator on Filtered Pindel Sample"
			gatk-4.2.0.0/gatk Funcotator --variant sample_pindel.vcf --reference genome.fa --ref-version hg19 --data-sources-path funcotator_dataSources.v1.6.20190124s --output pindel_func.txt --output-file-format MAF --disable-sequence-dictionary-validation &> /dev/null
			Rscript Pindel_Func.R pindel_func.txt
			echo "Running Mpileup on Indels for presence in Normal"
			perl Mpileup_Indel_Normal.pl Indel_MML.txt Normal.bam &> /dev/null
			echo "Running Mpileup on Indels for presence in DNA"
			perl Mpileup_Indel_DNA.pl Indel_MML.txt DNA.bam &> /dev/null
			echo "Running Mpileup on Indels for presence in Sort0"
			perl Mpileup_Indel_Sort0.pl Indel_MML.txt SortedFiltered.0.bam &> /dev/null
			echo "Running Mpileup on Indels for presence in Sort1"
			perl Mpileup_Indel_Sort1.pl Indel_MML.txt SortedFiltered.1.bam &> /dev/null
			echo "Running Mpileup on Indels for presence in RNA"
			perl Mpileup_Indel_RNA.pl Indel_MML.txt RNA.bam &> /dev/null
			echo "Filtering Indels based off Mpileup Results"
			Rscript Indel_Filt.R Indel_MML.xlsx Pindel_Sample.vcf
    		touch Pindel_filtered.vcf    	
		fi
	}	
    
    echo "Uploading Data"
    Mpileup_DNA=$(dx upload MpileupOutput_DNA.txt --brief)
    dx-jobutil-add-output Mpileup_DNA "$Mpileup_DNA" --class=file
    Indel_MML=$(dx upload Indel_MML.xlsx --brief)
    dx-jobutil-add-output Indel_MML "$Indel_MML" --class=file
    Indel_MMLtxt=$(dx upload Indel_MML.txt --brief)
    dx-jobutil-add-output Indel_MMLtxt "$Indel_MMLtxt" --class=file
    pindel_func=$(dx upload pindel_func.txt --brief)
    dx-jobutil-add-output pindel_func "$pindel_func" --class=file
    Pindel_Filt=$(dx upload Pindel_filtered.vcf --brief)
    dx-jobutil-add-output Pindel_Filt "$Pindel_Filt" --class=file
    Mpileup_LOH=$(dx upload MpileupOutput_LOH.txt --brief)
    dx-jobutil-add-output Mpileup_LOH "$Mpileup_LOH" --class=file
    JavaTree=$(dx upload MpileupOutputTreeviewReady_LOH.cdt --brief)
    dx-jobutil-add-output JavaTree "$JavaTree" --class=file
    Mpileup_Sort0=$(dx upload MpileupOutput_Sorted0.txt --brief)
    dx-jobutil-add-output Mpileup_Sort0 "$Mpileup_Sort0" --class=file
    Mpileup_Sort1=$(dx upload MpileupOutput_Sorted1.txt --brief)
    dx-jobutil-add-output Mpileup_Sort1 "$Mpileup_Sort1" --class=file
    Mpileup_Normal=$(dx upload MpileupOutput_Normal.txt --brief)
    dx-jobutil-add-output Mpileup_Normal "$Mpileup_Normal" --class=file
    Mpileup_RNA=$(dx upload MpileupOutput_RNA.txt --brief)
   	dx-jobutil-add-output Mpileup_RNA "$Mpileup_RNA" --class=file
    Sort0bam=$(dx upload SortedFiltered.0.bam --brief)
    dx-jobutil-add-output Sort0bam "$Sort0bam" --class=file
    Sort1bam=$(dx upload SortedFiltered.1.bam --brief)
    dx-jobutil-add-output Sort1bam "$Sort1bam" --class=file
    Sort0bai=$(dx upload SortedFiltered.0.bam.bai --brief)
    dx-jobutil-add-output Sort0bai "$Sort0bai" --class=file
    Sort1bai=$(dx upload SortedFiltered.1.bam.bai --brief)
    dx-jobutil-add-output Sort1bai "$Sort1bai" --class=file
	SeqContextOutput=$(dx upload output.txt --brief)
    dx-jobutil-add-output SeqContextOutput "$SeqContextOutput" --class=file
	SeqContextInput=$(dx upload SeqContextInput.txt --brief)
    dx-jobutil-add-output SeqContextInput "$SeqContextInput" --class=file
	MMLtxt=$(dx upload MML.txt --brief)	
    dx-jobutil-add-output MMLtxt "$MMLtxt" --class=file

	Rscript RMMLCreation.R
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    MMLxlsx=$(dx upload MML.xlsx --brief)
	
    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output MMLxlsx "$MMLxlsx" --class=file
   
}
